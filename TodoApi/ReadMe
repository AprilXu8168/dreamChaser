

### Dotnet.Core.api

[Resource](https://learn.microsoft.com/en-au/aspnet/core/tutorials/first-web-api?view=aspnetcore-8.0&tabs=visual-studio)


### Main job of an api app
| API                        | Description                    | Request Body   | Response Body          |
|----------------------------|--------------------------------|----------------|------------------------|
| GET /api/todoitems          | Get all to-do items            | None           | Array of to-do items   |
| GET /api/todoitems/{id}     | Get an item by ID              | None           | To-do item             |
| POST /api/todoitems         | Add a new item                 | To-do item     | To-do item             |
| PUT /api/todoitems/{id}     | Update an existing item        | To-do item     | None                   |
| DELETE /api/todoitems/{id}  | Delete an item                 | None           | None  


### 0. generate code
```
    dotnet new webapi --use-controllers -o TodoApi
    cd TodoApi
    dotnet add package Microsoft.EntityFrameworkCore.InMemory
    code -r ../TodoApi
```

### 1. start from model folder, define data that app manages

### 2. add a database context,  as the main class that coordinates EF functionality  for a data model
```
    using Microsoft.EntityFrameworkCore;

    namespace TodoApi.Models;

    public class TodoContext : DbContext
    {
        public TodoContext(DbContextOptions<TodoContext> options)
            : base(options)
        {
        }
        public DbSet<TodoItem> TodoItems { get; set; } = null!;
    }

    // TodoItem is the basic data type defined in model earlier
```

### 3. Register db context
```
 => Program.cs

    using Microsoft.EntityFrameworkCore;
    using TodoApi.Models;
    
    ...

    builder.Services.AddDbContext<TodoContext>(opt =>
        opt.UseInMemoryDatabase("TodoList"));
```

### 4. Scaffold a controller
```
    => TodoApi Root of project

    dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
    dotnet add package Microsoft.EntityFrameworkCore.Design
    dotnet add package Microsoft.EntityFrameworkCore.SqlServer
    dotnet add package Microsoft.EntityFrameworkCore.Tools
    dotnet tool uninstall -g dotnet-aspnet-codegenerator
    dotnet tool install -g dotnet-aspnet-codegenerator
    dotnet tool update -g dotnet-aspnet-codegenerator
```

### 5. Generate Controller based on models and dbcontext
```
    dotnet aspnet-codegenerator controller -name TodoItemsController -async -api -m TodoItem -dc TodoContext -outDir Controllers

```

### 6. Review code to check routing 

```
    dotnet run dev
```

NOTE: Make sure to check port number before click 

[API PAGE](http://localhost:5295/swagger/index.html)

[single data review](http://localhost:5295/api/TodoItems/2)

### 7. Interaction with JS page
```
    => wwwroot -> index.html
    => wwwroot -> js -> site.js
    => wwwroot -> css -> site.css
```
[Index page review](http://localhost:5295)

### 8. Interaction with React component

    To make sure the backend build and run ok, test with
    http://localhost:5295/swagger/index.html
    add/update/delete/get, etc.

#### 8.0 Enable Cors from Backend
```
    -> Program.cs
    //Enable cores 
    app.UseCors(c => c.AllowAnyHeader().AllowAnyOrigin().AllowAnyMethod());
```

#### 8.1 Create react app with npx 

```
    npx create-react-app my-app
```

#### 8.2 Define frontEnd as a react Component
```
    -> FrontEndapp/src/App.jsx 
    import { React, Component } from 'react';
```

#### 8.3 Fetch/ Get

``` 
==> Props define

    constructor(props){
    super(props);
    this.state={
      tasks:[]
    }
  }

==> Request define

  // Global var all upper letters
  API_URL = "http://localhost:5295/";

  async refreshTasks(){
    fetch(this.API_URL+"api/todoItems/").then(response => response.json())
    .then(data => {
      this.setState({tasks:data});
    })
  }


==> when Refresh/Fetch
    componentDidMount(){
    this.refreshTasks();
  }

--> render() ==> parse datda
    const{tasks} = this.state;

==> Display with map func
    {tasks.map(item=>
        <p>
        <b>{item.name}</b>
        </p>
    )}
```

#### 8.4 Post/Create
```
==> add button and input place holder
    <input id="newTask" />
    <button onClick={()=>this.addClick()}>Add to List</button>

==> Take the input and create a json request body
    var newTask=document.getElementById("newTask");

    const item = {
      isComplete: false,
      name: newTask.value.trim()
    };

==> HTTP request 
  async addClick(){
    var newTask=document.getElementById("newTask");
    if (newTask.value == '') {
      throw new Error('Task not valid! ');
    }
    const data = new FormData();
    data.append("newTasks", newTask);
    const item = {
      isComplete: false,
      name: newTask.value.trim()
    };

    console.log("json received is", JSON.stringify(item))

    fetch (this.API_URL+"api/todoitems/",{
      method: "POST",
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(item)
    })
    .then(res => res.json())
    .then(() => {
      newTask.value='';
      this.refreshTasks();
    })

  }

```

### Run postgres image inside docker container 

1. Install docker 

2. Install/Update dotnet-ef
```
dotnet tool install --local dotnet-ef --version 8.*
```
3. Add required packages
```
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
```
4. DB Content define
```
e.g.
using Microsoft.EntityFrameworkCore;

namespace proj_Name.Models;

public class projContext : DbContext 
{
    public projContext(DbContextOptions<projContext> options)
        : base(options)
    {
    }
    public DbSet<TodoItem> todoItems { get; set; }
}
```
5. Inject DB Contxt to Program.cs
```
  // Get connection string
    var conn = builder.Configuration.GetConnectionString("connection_Name");
    builder.Services.AddDbContext<db_NameContext>(options =>
    options.UseNpgsql(conn));
```
6. Define connection string inside appsetting.json
```
"ConnectionStrings": {
  "PostgresUser=postgres;
  PostgresPassword=postgres;
  ..."
  }
```

7. [docker-compose.yml](https://medium.com/@jewelski/quickly-set-up-a-local-postgres-database-using-docker-5098052a4726)
```
docker-compose up -d
The -d flag stands for "detached mode," 
which means that the containers will be started in the background and will not be attached to the current terminal.
```