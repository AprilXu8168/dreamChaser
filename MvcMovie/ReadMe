## Dotnet core MVC 


[toturial p1 MVC Start](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/start-mvc?view=aspnetcore-8.0&tabs=visual-studio-code)

### 0.  Create mvc app with command
```
dotnet new mvc -o MvcMovie
```

### 1. Run and check start up 
```
dotnet run dev
```

[tutorial p2 add Controller to MVC](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/adding-controller?view=aspnetcore-8.0&tabs=visual-studio)

| Component | Description                                                | Responsibilities                                    |
|-----------|------------------------------------------------------------|----------------------------------------------------|
| Model     | Represents the data and the business logic of the application. | - Manages data and business rules.<br>- Retrieves data from databases.<br>- Updates data based on user actions. |
| View      | Represents the presentation layer and user interface.     | - Displays data to the user.<br>- Renders the user interface.<br>- Sends user input to the controller. |
| Controller| Acts as an intermediary between the Model and the View.    | - Handles user input.<br>- Updates the model based on user actions.<br>- Refreshes the view based on model changes. |

### 2. Modify Controller 
```
    ->Programe.cs
    //Default URL routing logic 
/[Controller]/[ActionName]/[Parameters]
```

UseCase Example
```
-> Controllers/HelloWorldController.cs

// GET: /HelloWorld/Welcome/ 
// Requires using System.Text.Encodings.Web;
public string Welcome(string name, int numTimes = 1)
{
    return HtmlEncoder.Default.Encode($"Hello {name}, NumTimes is: {numTimes}");
}
```

To visit the output: https://localhost:{PORT}/HelloWorld/Welcome?name=Rick&numtimes=4

- The & character separates field-value pairs.

- The ? (question mark) in the above URL is a separator, and the query string follows.

[tutorial p3 add View to MVC](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/adding-view?view=aspnetcore-8.0&tabs=visual-studio)

### 3. Work with new views

.cshtml file extension => Razor-based view templates

Modify layout inside ```Views/Shared/_Layout.cshtml ```

Modify displays from views:
```
@{
    ViewData["Title"] = "Welcome";
}

<h2>Welcome</h2>

<ul>
    @for (int i = 0; i < (int)ViewData["NumTimes"]!; i++)
    {
        <li>@ViewData["Message"]</li>
    }
</ul>
```
To visit the output: https://localhost:{PORT}/HelloWorld/Welcome?name=Rick&numtimes=4

[tutorial p4 add Model To MVC](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/adding-model?view=aspnetcore-8.0&tabs=visual-studio)

### 4. Add data model class
```
-> Models/Movie.cs
using System.ComponentModel.DataAnnotations;

namespace MvcMovie.Models;

public class Movie
{
    public int Id { get; set; }
    public string? Title { get; set; }
    ...
}
```

### 5. Add NuGet Packages
```
dotnet tool uninstall --global dotnet-aspnet-codegenerator
dotnet tool install --global dotnet-aspnet-codegenerator
dotnet tool uninstall --global dotnet-ef
dotnet tool install --global dotnet-ef
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.SQLite
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.Tools
```

### 6. Use Scaffolding tools to produce CRUD pages
```
dotnet aspnet-codegenerator controller -name MoviesController -m Movie -dc MvcMovie.Data.MvcMovieContext --relativeFolderPath Controllers --useDefaultLayout --referenceScriptLibraries --databaseProvider sqlite
```
The comnmand above has:
```
    Using database provider'MicrosoftEntityFrameworkCoreSqlite'!

    Added Controller : '\Controllers\MoviesController.cs'.
    Added View : \Views\Movies\Create.cshtml
    Added View : \Views\Movies\Edit.cshtml
    Added View : \Views\Movies\Details.cshtml
    Added View : \Views\Movies\Delete.cshtml
    Added View : \Views\Movies\Index.cshtml
```
> **_NOTE:_** This app is not runable yet, As the database context does not exist.  
```
    SqliteException: SQLite Error 1: 'no such table: Movie'.
```

### 7. Initial Migtration
Before migration, check ```Program.cs``` has updated to Config Correct db context 
```
e.g:  
    builder.Services.AddDbContext<MvcMovieContext>(options=>options.UseSqlite(builder.Configuration.GetConnectionStrin("MvcMovieContext")));
```

Register the connection in ```appsettings.json```
```
"ConnectionStrings": {
  "MvcMovieContext": "Data Source=MvcMovie.db"
}
e.g:     
    "MvcMovieContext": "Data Source=MvcMovieContext-ebadd6cd-242f-4933-a944-804b76538deb.db"
```


Use EF Core Migration feature to create the db, and update.
```
dotnet ef migrations add InitialCreate

dotnet ef database update
```
Generated database context class and registration
```
    -> Data/MvcMovieContext.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using MvcMovie.Models;

namespace MvcMovie.Data
{
    public class MvcMovieContext : DbContext
    {
        public MvcMovieContext (DbContextOptions<MvcMovieContext> options)
            : base(options)
        {
        }

        public DbSet<MvcMovie.Models.Movie> Movie { get; set; } = default!;
    }
}
```

```
    -> Migrations/{timestamp}_InitialCreate.cs
protected override void Up(MigrationBuilder migrationBuilder){
}
protected override void Down(MigrationBuilder migrationBuilder){
}
```
- InitialCreate.Up creates the Movie table and configures Id as the primary key
- InitialCreate.Down reverts the schema changes made by the Up migration

```
    -> Controllers/MovieController.cs --> Constructor
public class MoviesController : Controller
{
    private readonly MvcMovieContext _context;

    public MoviesController(MvcMovieContext context)
    {
        _context = context;
    }
    ...
}
```
The constructor uses Dependency Injection to inject the database context (MvcMovieContext) into the controller

> **_NOTE:_** Highly recommand the vscode extension: vscode-sqlite for db content reviewing

Or type the command shown below
```
sudo apt install sqlite
```

### 8. Strongly Typed models and the ```@model``` directive

```
    -> Views/Movies/Details.cshtml
```
- The @model statement at the top specifies the type of object that the view expects

```
    -> Controllers/MoviesController.cs/Index
    return View(await _context.Movie.ToListAsync());
```
- the code creates a List object when it calls the View method. The code passes this Movies list from the Index action method to the view

```
    -> Views/Movies/Index.cshtml
@model IEnumerable<MvcMovie.Models.Movie>
```
-  @model directive allows access to the list of movies that the controller passed to the view by using a Model object that's strongly typed

[tutorial p5 work with a database in an ASP.NET Core MVC app](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/working-with-sql?view=aspnetcore-8.0&tabs=visual-studio)

### 9. Seed the database
Create a new class named SeedData in the Models folder
Adding initialized data if no data found from db 
``` -> Models/SeedData.cs```

Add the seed Initializer
```
    ->Program.cs

using MvcMovie.Models; 
...
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;

    SeedData.Initialize(services);
}
```

[tutorial p6 controller methods and views](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/controller-methods-views?view=aspnetcore-8.0)

To modify display text on page:
``` 
    -> Models/Movie.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
...

[Display(Name = "Release Date")]
[DataType(DataType.Date)]
public DateTime ReleaseDate { get; set; }
```
-  The Display attribute specifies what to display for the name of a field
-   The DataType attribute specifies the type of the data (Date), so the time information stored in the field isn't displayed

Check the 2 edit function inside ``` ->Controllers/MovieControllers.cs```

GET: Movies/Edit/id=?   
    - fetches the movie and populates the edit form generated by the Edit.cshtml<br>
    - [HttpGet] is not necessary because [HttpGet] is the default.<br>

POST: Movies/Edit/id=?<br>
    -  processes the posted movie values<br>
    - The ```[Bind]``` attribute is one way to protect against over-posting<br>
    - only include properties in the ```[Bind]``` attribute that you want to change<br>
    - The HttpPost attribute specifies that this Edit method can be invoked only for POST requests<br>
    - ValidateAntiForgeryToken attribute is used to prevent forgery of a request<br>

- [ValidateAntiForgeryToken] attribute validates the hidden XSRF token generated by the anti-forgery token generator in the Form Tag Helper ```<input class="form-control ...>```

- The ModelState.IsValid property verifies that the data submitted in the form can be used to modify (edit or update) a Movie object

- If the data is valid, it's saved. The updated (edited) movie data is saved to the database by calling the SaveChangesAsync method of database context. 

- After saving the data, the code redirects the user to the Index action method of the MoviesController class, which displays the movie collection, including the changes just made.

-  client-side validation checks any validation rules on the fields. e.g. fields are required if no ? included in Models/Movie

[tutorial p7 add search to MVC](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/search?view=aspnetcore-8.0)

### 10. Adding search func 
``` -> Controllers/MoviesController.cs --> Index```

- Create LINQ query to select movies
- the evaluation of an expression is delayed until its realized value is actually iterated over or the ToListAsync method is called

```
    var movies = from m in _context.Movie
             select m;
```
Example UQL: http://localhost:5206/Movies/index/ghost

Simple logic of filter
```
if (!String.IsNullOrEmpty(id))
{
    movies = movies.Where(s => s.Title!.ToUpper().Contains(id.ToUpper()));
}
```
Add input field on view page

To capture the search information in URL, add form method. 
Now when submitting a search, the URL contains the search query string.
```
<form asp-asp-controller="Movies" asp-action="Index" method="get">
```

### 11. Add genre filter

use MovieGenreViewModel class instead of Movie.
- public List<Movie>? Movies { get; set; } --> A list of movies
- public SelectList? Genres { get; set; } --> List of genres, allows users to select from
- public string? MovieGenre { get; set; } --> contains the selected genre
- public string? SearchString { get; set; } --> contains the text users enter in the search text box

Use LINQ to get list of genres
```
IQueryable<string> genreQuery = from m in _context.Movie
                                orderby m.Genre
                                select m.Genre;
```

filter logic
```
if (!string.IsNullOrEmpty(movieGenre))
{
    movies = movies.Where(x => x.Genre == movieGenre);
}
```

output object 
```
var movieGenreVM = new MovieGenreViewModel
{
    Genres = new SelectList(await genreQuery.Distinct().ToListAsync()),
    Movies = await movies.ToListAsync()
};
return View(movieGenreVM);
```

Modify view page to filter/search
Replace the model type from Movie to MovieGenreViewModel
```
@model MvcMovie.Models.MovieGenreViewModel
```

Adding a selector near search input box
```
<select asp-for="MovieGenre" asp-items="Model.Genres">
    <option value="">All</option>
</select>
```

Change model to model.Movies as the input model type has been modified 
```
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movies![0].Price)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Movies!)
```
